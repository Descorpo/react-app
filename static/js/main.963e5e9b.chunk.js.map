{"version":3,"sources":["store/actions/auth.js","store/reducers/auth.js","store/reducers/index.js","store/actionTypes.js","store/reducers/error.js","store/reducers/polls.js","store/index.js","store/actions/error.js","services/api.js","store/actions/polls.js","components/ErrorMessage.jsx","components/Auth.jsx","pages/AuthPage.jsx","components/Poll.jsx","pages/TestPage.jsx","components/Polls.jsx","pages/HomePage.jsx","pages/PollPage.jsx","components/CreatePoll.jsx","pages/CreatePollPage.jsx","containers/RouteViews.jsx","containers/NavBar.jsx","containers/App.jsx","serviceWorker.js","index.js"],"names":["token","DEFAULT_STATE","isAuthenticated","user","combineReducers","auth","state","arguments","length","undefined","action","type","Object","keys","error","message","objectSpread","polls","currentPoll","poll","store","createStore","rootReducer","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","addError","api","call","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","method","path","data","response","wrap","_context","prev","next","axios","concat","sent","abrupt","stop","_x","_x2","_x3","apply","this","setToken","defaults","headers","common","setCurrentUser","logout","dispatch","localStorage","clear","API","setPolls","setCurrentPool","getCurrentPoll","_ref4","_callee4","_context4","t0","_x4","connect","react_default","createElement","react","className","Auth","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","username","password","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","defineProperty","target","name","value","_this$state","authType","preventDefault","authUser","onSubmit","htmlFor","autoComplete","onChange","Component","_ref2","objectWithoutProperties","setItem","AuthPage","Redirect","to","components_ErrorMessage","components_Auth","vote","_ref5","_callee5","_context5","console","log","_x5","answers","options","map","option","onClick","_id","answer","key","labels","datasets","label","question","backgroundColor","Math","random","toString","slice","borderColor","votes","react_chartjs_2_es","TestPage","components_Poll","Polls","handleSelect","getPolls","id","history","push","_this2","_this$props","getUserPolls","_callee2","_context2","HomePage","components_Polls","PollPage","match","getPoll","params","CreatePoll","addAnswer","handleAnswer","toConsumableArray","index","createPoll","i","_ref3","_callee3","_context3","CreatePollPage","components_CreatePoll","withRouter","Switch","Route","exact","render","pages_HomePage","pages_AuthPage","pages_CreatePollPage","pages_PollPage","assign","pages_TestPage","Link","jwtToken","decode","err","App","es","BrowserRouter","containers_NavBar","containers_RouteViews","Boolean","location","hostname","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.963e5e9b.chunk.js","sourcesContent":["import { addError, removeError } from './error';\r\nimport { SET_CURRENT_USER } from \"../actionTypes\";\r\nimport API from '../../services/api';\r\n\r\nexport const setCurrentUser = user => ({\r\n   type: SET_CURRENT_USER,\r\n   user\r\n});\r\n\r\nexport const setToken = token => {\r\n    API.setToken(token);\r\n};\r\n\r\nexport const logout = () => {\r\n  return dispatch => {\r\n      localStorage.clear();\r\n      API.setToken(null);\r\n      dispatch(setCurrentUser({}));\r\n      dispatch(removeError());\r\n  }\r\n};\r\n\r\nexport const authUser = (path, data) => {\r\n    return async dispatch => {\r\n        try {\r\n            const { token, ...user } = await API.call('post',`auth/${path}`, data);\r\n            localStorage.setItem('jwtToken', token);\r\n            API.setToken(token);\r\n            dispatch(setCurrentUser(user));\r\n            dispatch(removeError());\r\n        } catch (err) {\r\n            const error = err.response.data;\r\n            dispatch(addError(error.message));\r\n        }\r\n    }\r\n};","import { SET_CURRENT_USER } from \"../actionTypes\";\r\n\r\nconst DEFAULT_STATE = {\r\n    isAuthenticated: false,\r\n    user: {}\r\n};\r\n\r\nexport default (state = DEFAULT_STATE, action) => {\r\n    switch (action.type) {\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                isAuthenticated: !!Object.keys(action.user).length,\r\n                user: action.user\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};","import { combineReducers } from \"redux\";\r\n\r\nimport auth from './auth';\r\nimport error from './error';\r\nimport { polls, currentPoll } from './polls'\r\n\r\nexport default combineReducers({\r\n    auth,\r\n    error,\r\n    polls,\r\n    currentPoll\r\n});","export const ADD_ERROR = 'ADD_ERROR';\r\nexport const REMOVE_ERROR = 'REMOVE_ERROR';\r\n\r\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';\r\n\r\nexport const SET_POLLS = 'SET_POLLS';\r\nexport const SET_CURRENT_POLL = 'SET_CURRENT_POLL';","import {ADD_ERROR, REMOVE_ERROR} from '../actionTypes';\r\n\r\nexport default (state = { message: null }, action) => {\r\n    switch (action.type) {\r\n        case ADD_ERROR:\r\n            return {...state, message: action.error};\r\n        case REMOVE_ERROR:\r\n            return {...state, message: null};\r\n        default:\r\n            return state;\r\n    }\r\n};","import { SET_POLLS, SET_CURRENT_POLL } from '../actionTypes';\r\n\r\nexport const polls = (state = [], action) => {\r\n  switch (action.type) {\r\n      case SET_POLLS:\r\n          return action.polls;\r\n      default:\r\n          return state;\r\n  }\r\n};\r\n\r\nexport const currentPoll = (state = {}, action) => {\r\n  switch (action.type) {\r\n      case SET_CURRENT_POLL:\r\n          return action.poll;\r\n      default:\r\n          return state;\r\n  }\r\n};","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nconst DEFAULT_STATE = {\r\n    error: { message: null }\r\n};\r\n\r\nexport const store = createStore( rootReducer, DEFAULT_STATE,\r\n    compose(\r\n        applyMiddleware(thunk),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n);","import { ADD_ERROR, REMOVE_ERROR } from '../actionTypes';\r\n\r\nexport const addError = error => ({\r\n   type: ADD_ERROR,\r\n   error\r\n});\r\n\r\nexport const removeError = () => ({\r\n    type: REMOVE_ERROR\r\n});","import axios from 'axios';\r\n\r\nconst host = 'http://localhost:4000/api';\r\n\r\nexport const setToken = token => {\r\n  if (token) {\r\n     axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  } else {\r\n      delete axios.defaults.headers.common['Authorization'];\r\n  }\r\n};\r\n\r\nexport const call = async (method, path, data) => {\r\n    const response = await axios[method](`${host}/${path}`, data);\r\n    return response.data;\r\n};\r\n\r\nexport default { call, setToken };","import api from '../../services/api';\r\nimport { SET_POLLS, SET_CURRENT_POLL } from \"../actionTypes\";\r\nimport { addError, removeError } from \"./error\";\r\n\r\nexport const setPolls = polls => ({\r\n   type: SET_POLLS,\r\n   polls\r\n});\r\n\r\nexport const setCurrentPool = poll => ({\r\n   type: SET_CURRENT_POLL,\r\n   poll\r\n});\r\n\r\nexport const getPolls = () => {\r\n  return async dispatch => {\r\n      try {\r\n          const polls = await api.call('get','polls');\r\n          dispatch(setPolls(polls));\r\n          dispatch(removeError());\r\n      } catch (err) {\r\n          const error = err.response.data;\r\n          dispatch(addError(error));\r\n      }\r\n  }\r\n};\r\n\r\nexport const getUserPolls = () => {\r\n    return async dispatch => {\r\n        try {\r\n            const polls = await api.call('get','polls/user');\r\n            dispatch(setPolls(polls));\r\n            dispatch(removeError());\r\n        } catch (err) {\r\n            const error = err.response.data;\r\n            dispatch(addError(error.message));\r\n        }\r\n    }\r\n};\r\n\r\nexport const createPoll = data => {\r\n  return async dispatch => {\r\n      try {\r\n          const poll = await api.call('post', 'polls', data);\r\n          dispatch(setCurrentPool(poll));\r\n          dispatch(removeError());\r\n      } catch (err) {\r\n          const error = err.response.data;\r\n          dispatch(addError(error.message));\r\n      }\r\n  }\r\n};\r\n\r\nexport const getCurrentPoll = path => {\r\n  return async dispatch => {\r\n      try {\r\n          const poll = await api.call('get', `polls/${path}`);\r\n          dispatch(setCurrentPool(poll));\r\n          dispatch(removeError());\r\n      } catch (err) {\r\n          const error = err.response.data;\r\n          dispatch(addError(error));\r\n      }\r\n  }\r\n};\r\n\r\nexport const vote = (path, data) => {\r\n  return async dispatch => {\r\n      try {\r\n          const poll = await api.call('post', `polls/${path}`, data);\r\n          console.log('dtgrsgdrg',poll);\r\n          dispatch(setCurrentPool(poll));\r\n          dispatch(removeError());\r\n      } catch (err) {\r\n          const error = err.response.data.message;\r\n          dispatch(addError(error));\r\n      }\r\n  }\r\n};","import React, { Fragment } from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\n// Деструктируеться можно было б props.error\r\nconst ErrorMessage = ({ error }) => (\r\n    <Fragment>{error.message && <div className='error'>{error.message}</div>}</Fragment>\r\n);\r\n\r\nexport default connect( store => ({error: store.error}))(ErrorMessage);","import React,{ Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { authUser, logout } from \"../store/actions\";\r\n\r\nclass Auth extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          username: '',\r\n          password: ''\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n       this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        const { username, password } = this.state;\r\n        const { authType } = this.props;\r\n        e.preventDefault();\r\n\r\n        this.props.authUser(authType || 'login', { username, password });\r\n    }\r\n\r\n    render() {\r\n        const { username } = this.state;\r\n        const { password } = this.state;\r\n\r\n        return <div>\r\n            <form className='form' onSubmit={this.handleSubmit}>\r\n                <label className='form-label' htmlFor=\"username\">username</label>\r\n                <input\r\n                    className='form-input'\r\n                    type=\"text\"\r\n                    value={username}\r\n                    name=\"username\"\r\n                    autoComplete='off'\r\n                    onChange={this.handleChange}\r\n                />\r\n\r\n                <label className='form-label' htmlFor=\"password\">password</label>\r\n                <input\r\n                    className='form-input'\r\n                    type=\"password\"\r\n                    value={password}\r\n                    name=\"password\"\r\n                    autoComplete='off'\r\n                    onChange={this.handleChange}\r\n                />\r\n\r\n                <div className=\"button_center\">\r\n                    <button className='button' type=\"submit\">Submit</button>\r\n                </div>\r\n\r\n            </form>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    () => ({}),\r\n    { authUser, logout }\r\n    )(Auth);\r\n","import React from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport ErrorMessage from \"../components/ErrorMessage\";\r\nimport Auth from \"../components/Auth\";\r\n\r\n\r\nconst AuthPage = ({ authType, isAuthenticated }) => {\r\n\r\n    if (isAuthenticated) return <Redirect to=\"/\" />;\r\n\r\n    return (\r\n        <div>\r\n            <ErrorMessage/>\r\n            <Auth authType={authType} />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default AuthPage;","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Pie } from \"react-chartjs-2\";\r\n\r\nimport { vote } from \"../store/actions\";\r\n\r\nconst color =() => {\r\n  return ('#' + Math.random().toString(16).slice(2, 8));\r\n};\r\n\r\nconst Poll = ({ poll, vote }) => {\r\n    const answers = poll.options && poll.options.map(option => (\r\n       <button\r\n           className='button'\r\n           onClick={() => vote(poll._id, {answer: option.option})}\r\n           key={option._id}>\r\n           { option.option }\r\n       </button>\r\n    ));\r\n\r\n    const data = poll.options && {\r\n      labels: poll.options.map(option => option.option),\r\n        datasets: [\r\n            {\r\n                label: poll.question,\r\n                backgroundColor: poll.options.map(option => color()),\r\n                borderColor: '#323643',\r\n                data: poll.options.map(option => option.votes)\r\n            }\r\n        ]\r\n    };\r\n\r\n    return <div>\r\n        <h3 className='poll-title'>{poll.question}</h3>\r\n        <div className='button_center'>{answers}</div>\r\n        {poll.options && <Pie data={data}/>}\r\n    </div>\r\n};\r\n\r\nexport default connect(store => ({\r\n    poll: store.currentPoll\r\n    }),\r\n    { vote }\r\n)(Poll);","import React from \"react\";\r\nimport Poll from \"../components/Poll\";\r\nimport ErrorMessage from \"../components/ErrorMessage\";\r\n\r\nconst TestPage = () => <div>\r\n    <ErrorMessage/>\r\n    <Poll />\r\n</div>;\r\n\r\nexport default TestPage;","import React, { Component, Fragment } from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { getPolls, getUserPolls, getCurrentPoll } from \"../store/actions\";\r\n\r\nclass Polls extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleSelect = this.handleSelect.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { getPolls } = this.props;\r\n        getPolls();\r\n    }\r\n\r\n    handleSelect(id) {\r\n        const { history } = this.props;\r\n        history.push(`/poll/${id}`);\r\n    }\r\n\r\n    render() {\r\n        const { auth, getPolls, getUserPolls } = this.props;\r\n\r\n        const polls = this.props.polls.map(poll => (\r\n            <li onClick={() => this.handleSelect(poll._id)} key={poll._id}>{poll.question}</li>\r\n        ));\r\n\r\n        return <Fragment>\r\n            {auth.isAuthenticated && (\r\n                <div className='button_center'>\r\n                    <button className='button' onClick={getPolls}>All polls</button>\r\n                    <button className='button' onClick={getUserPolls}>My polls</button>\r\n                </div>\r\n            )}\r\n            <ul className='polls'>{polls}</ul>\r\n        </Fragment>\r\n    }\r\n}\r\n\r\nexport default connect(store => ({\r\n    auth: store.auth,\r\n    polls: store.polls\r\n    }),\r\n    {getPolls, getUserPolls, getCurrentPoll}\r\n)(Polls);","import React from 'react';\r\nimport Polls from \"../components/Polls\";\r\nimport ErrorMessage from \"../components/ErrorMessage\";\r\n\r\nconst HomePage = props => <div>\r\n    <ErrorMessage />\r\n    <Polls {...props} />\r\n</div>;\r\n\r\nexport default HomePage;","import React from \"react\";\r\nimport Poll from \"../components/Poll\";\r\nimport ErrorMessage from \"../components/ErrorMessage\";\r\n\r\nconst PollPage = ({match, getPoll}) => {\r\n    getPoll(match.params.id);\r\n\r\n    return (\r\n        <div>\r\n            <ErrorMessage />\r\n            <Poll />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default PollPage;","import React, { Component, Fragment } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { createPoll } from \"../store/actions\";\r\n\r\nclass CreatePoll extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            question: '',\r\n            options: ['', '']\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.addAnswer = this.addAnswer.bind(this);\r\n        this.handleAnswer = this.handleAnswer.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n\r\n    addAnswer() {\r\n        this.setState({options: [...this.state.options, '']});\r\n    }\r\n\r\n    handleAnswer(e, index) {\r\n        const options = [...this.state.options];\r\n        options[index] = e.target.value;\r\n        this.setState({ options });\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.createPoll(this.state)\r\n    }\r\n\r\n    render() {\r\n        const options = this.state.options.map((options, i) => <Fragment key={i}>\r\n            <label className='form-label'>option</label>\r\n            <input\r\n                className='form-input'\r\n                type=\"text\"\r\n                value={options}\r\n                onChange={e => this.handleAnswer(e, i)}\r\n            />\r\n        </Fragment>);\r\n\r\n        return <form className='form' onSubmit={this.handleSubmit}>\r\n            <label className='form-label' htmlFor='question'>Question</label>\r\n            <input\r\n                className='form-input'\r\n                type=\"text\"\r\n                name='question'\r\n                value={this.state.question}\r\n                onChange={this.handleChange}\r\n            />\r\n            {options}\r\n            <div className=\"button_center\">\r\n                <button className='button' type='button' onClick={this.addAnswer}>Add options</button>\r\n                <button className='button' type='submit'>Submit</button>\r\n            </div>\r\n        </form>\r\n    }\r\n}\r\n\r\nexport default connect(() => ({}), { createPoll })(CreatePoll);","import React from 'react';\r\nimport ErrorMessage from \"../components/ErrorMessage\";\r\n\r\nimport { Redirect } from \"react-router-dom\";\r\nimport CreatePoll from '../components/CreatePoll';\r\n\r\nconst CreatePollPage = ({ isAuthenticated }) => {\r\n  if (!isAuthenticated) return <Redirect to='/login' />;\r\n\r\n  return (\r\n      <div>\r\n          <ErrorMessage />\r\n          <CreatePoll />\r\n      </div>\r\n  )\r\n};\r\n\r\nexport default CreatePollPage;","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Switch, Route, withRouter } from 'react-router-dom';\r\nimport AuthPage from '../pages/AuthPage';\r\nimport TestPage from \"../pages/TestPage\";\r\nimport HomePage from \"../pages/HomePage\";\r\nimport { getCurrentPoll } from '../store/actions';\r\nimport PollPage from \"../pages/PollPage\";\r\nimport CreatePollPage from \"../pages/CreatePollPage\";\r\n\r\nconst RouteViews = ({ auth, getCurrentPoll }) => (\r\n    <main>\r\n        <Switch>\r\n            <Route\r\n                exact\r\n                path=\"/\"\r\n                render={props => <HomePage {...props} />}\r\n            />\r\n\r\n            <Route\r\n                exact\r\n                path=\"/login\"\r\n                render={() =>(\r\n                    <AuthPage\r\n                        authType=\"login\"\r\n                        isAuthenticated={auth.isAuthenticated}\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <Route\r\n                exact\r\n                path=\"/register\"\r\n                render={() => (\r\n                    <AuthPage\r\n                    authType=\"register\"\r\n                    isAuthenticated={auth.isAuthenticated}\r\n                    />\r\n                )}\r\n            />\r\n            <Route\r\n                exact\r\n                path='/poll/new'\r\n                render={() =>\r\n                    <CreatePollPage isAuthenticated={auth.isAuthenticated}\r\n                    />\r\n                }\r\n            />\r\n            <Route\r\n                exact\r\n                path='/poll/:id'\r\n                render={props =>\r\n                    <PollPage getPoll={id => getCurrentPoll(id)} {...props}\r\n                    />\r\n                }\r\n            />\r\n            <Route\r\n                exact\r\n                path=\"/test\"\r\n                render={() => <TestPage />}\r\n            />\r\n        </Switch>\r\n    </main>\r\n);\r\n\r\nexport default withRouter(connect(store =>\r\n    ({ auth: store.auth }),\r\n    {getCurrentPoll}\r\n)(RouteViews));","import React, { Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from \"react-redux\";\r\nimport { logout } from '../store/actions';\r\n\r\nconst NavBar = ({ auth, logout }) => (\r\n    <div className='navbar'>\r\n        <div className=\"container\">\r\n            <ul className='navbar-container'>\r\n                <li>\r\n                    <Link className='navbar-brand navbar-item' to='/'>Home</Link>\r\n                </li>\r\n                { !auth.isAuthenticated &&\r\n                    <Fragment>\r\n                        <li>\r\n                            <Link className='navbar-item' to='/register'>Register</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link className='navbar-item' to='/login'>Login</Link>\r\n                        </li>\r\n                    </Fragment>\r\n                }\r\n                { auth.isAuthenticated &&\r\n                    <Fragment>\r\n                        <li>\r\n                            <Link className='navbar-item' to='/poll/new'>New poll</Link>\r\n                        </li>\r\n                        <li>\r\n                            <span className='navbar-item' onClick={logout}>Logout</span>\r\n                        </li>\r\n                    </Fragment>\r\n                }\r\n            </ul>\r\n            {auth.isAuthenticated && (<p className='navbar-user'>Logged in as {auth.user.username}</p>)}\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default connect(\r\n    store => ({auth: store.auth}),\r\n    {logout}\r\n)(NavBar);","import React, { Fragment } from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport decode from 'jwt-decode';\r\n\r\nimport { store } from '../store'\r\nimport { addError, setCurrentUser, setToken } from \"../store/actions\";\r\nimport RouteViews from '../containers/RouteViews';\r\nimport NavBar from '../containers/NavBar';\r\n\r\nif(localStorage.jwtToken) {\r\n    setToken(localStorage.jwtToken);\r\n    try {\r\n        store.dispatch(setCurrentUser(decode(localStorage.jwtToken)));\r\n    } catch (err) {\r\n        store.dispatch(setCurrentUser({}));\r\n        store.dispatch(addError(err));\r\n    }\r\n}\r\n\r\nconst App = () => (\r\n    <Provider store={store}>\r\n        <Router>\r\n            <Fragment>\r\n                <NavBar />\r\n                <RouteViews />\r\n            </Fragment>\r\n        </Router>\r\n    </Provider>\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}